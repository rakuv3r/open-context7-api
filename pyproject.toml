# project metadata and dependencies
[project]
name = "open-context7-api"
dynamic = ["version"]
description = "open-context7 API server"
readme = "README.md"
authors = [
    {name = "rakuv3r", email = "rakuv3r@gmail.com"}
]
dependencies = [
    "fastapi>=0.116.1",
    "uvicorn[standard]>=0.35.0",
    "gunicorn>=23.0.0",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "qdrant-client>=1.14.3",
    "httpx[socks]>=0.28.1",
    "gitpython>=3.1.45",
    "loguru>=0.7.3",
    "litellm>=1.76.0",
    "python-gitlab>=6.1.0",
    "sentry-sdk>=2.35.1",
    "orjson>=3.11.3",
    "validators>=0.35.0",
]
requires-python = ">=3.12"
license = "MIT"

[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
    "mypy>=1.17.0",
    "ruff>=0.12.10",
]

[tool.ruff]
# exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# same as black.
line-length = 88
indent-width = 4

# assume python 3.12
target-version = "py312"

[tool.ruff.lint]
# enable comprehensive code quality checks
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "D",   # pydocstyle
]

ignore = [
    "B008",  # allow function calls in argument defaults (FastAPI Depends pattern)
    "S104",  # allow bind to all interfaces (0.0.0.0)
    "S324",  # allow MD5 for non-security purposes (document IDs)
    "T201",  # allow print statements (development)
]

# allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# like black, use double quotes for strings.
quote-style = "double"

# like black, indent with spaces, rather than tabs.
indent-style = "space"

# like black, respect magic trailing commas.
skip-magic-trailing-comma = false

# like black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
force-single-line = true
lines-after-imports = 2

[tool.mypy]
plugins = [
  "pydantic.mypy"
]

follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[[tool.mypy.overrides]]
module = "src.api.*"
disable_error_code = ["no-untyped-def"]

[tool.hatch.version]
path = "src/__init__.py"
